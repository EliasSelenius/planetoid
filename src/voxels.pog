
struct VoxelGrid {

    float32* data;
    uint8* material;
    uint32 res;

    DrawBuffers db;
    uint32 inds_outline_ebo;

    uint32 numVerts;
    vertex2D* verts;
    uint32[..] inds;
    uint32[..] inds_outline;

    bool must_remesh;
}

const TopLeftBit = 8;
const TopRightBit = 4;
const BottomLeftBit = 2;
const BottomRightBit = 1;


void add_tri(with VoxelGrid* grid, uint32 i1, uint32 i2, uint32 i3) {
    list_add(*grid.inds, *i1);
    list_add(*grid.inds, *i2);
    list_add(*grid.inds, *i3);
}

void add_outline(with VoxelGrid* grid, uint32 i1, uint32 i2) {
    list_add(*grid.inds_outline, *i1);
    list_add(*grid.inds_outline, *i2);
}

uint32 get_index(uint32 res, uint32 x, uint32 y) {
    return x * res + y;
}

VoxelGrid createVoxelGrid(uint32 res) {
    VoxelGrid grid = {};
    grid.must_remesh = true;

    grid.res = res;
    grid.data = malloc(res * res * sizeof float32);
    grid.material = malloc(res * res * sizeof uint8);

    for 0 .. res*res {
        grid.data[it] = 0;
        grid.material[it] = (random01()*3) as uint8;
    }

    //              3r^2 - 2r
    grid.numVerts = 3 * grid.res * grid.res - 2 * grid.res;
    grid.verts = malloc(grid.numVerts * sizeof vertex2D);

    float32 half = grid.res as float32 / 2.0;
    for uint32 x : 0 .. grid.res {
        for uint32 y : 0 .. grid.res {
            let i = get_index(grid.res, x, y);
            grid.verts[i].pos.x = x as float32 - half;
            grid.verts[i].pos.y = y as float32 - half;
        }
    }

    for uint32 i : 0 .. grid.numVerts {
        grid.verts[i].color = White;
        grid.verts[i].uv = grid.verts[i].pos;
    }

    grid.inds = list_create(sizeof uint32);
    grid.inds_outline = list_create(sizeof uint32);

    grid.db = create_draw_buffers(sizeof vertex2D, vertex2D_attribs);
    bind_instance_buffer_to_vao(grid.db.vao, draw2d_renderer.vbo_instances);

    glGenBuffers(1, *grid.inds_outline_ebo);

    return grid;
}

// enum ShapeMask {
//     CornerTopLeft        = TopLeftBit,
//     CornerTopRight       = TopRightBit,
//     CornerBottomRight    = BottomRightBit,
//     CornerBottomLeft     = BottomLeftBit,
//     InvCornerTopLeft     = 0x0F & ~TopLeftBit,
//     InvCornerTopRight    = 0x0F & ~TopRightBit,
//     InvCornerBottomRight = 0x0F & ~BottomRightBit,
//     InvCornerBottomLeft  = 0x0F & ~BottomLeftBit,
//     EdgeTop              = TopLeftBit | TopRightBit,
//     EdgeBottom           = BottomLeftBit | BottomRightBit,
//     EdgeLeft             = TopLeftBit | BottomLeftBit,
//     EdgeRight            = TopRightBit | BottomRightBit,
//     DiagonalDown         = TopLeftBit | BottomRightBit,
//     DiagonalUp           = TopRightBit | BottomLeftBit,
//     Solid                = 0x0F,
//     Air                  = 0x00
// }

uint8 get_mask(float32 p1, p2, p3, p4) {
    uint8 mask = 0;
    if p1 != 0.0  mask |= TopLeftBit;
    if p2 != 0.0  mask |= TopRightBit;
    if p3 != 0.0  mask |= BottomLeftBit;
    if p4 != 0.0  mask |= BottomRightBit;

    // if p1 > PointOnThreshold  mask |= TopLeftBit;
    // if p2 > PointOnThreshold  mask |= TopRightBit;
    // if p3 > PointOnThreshold  mask |= BottomLeftBit;
    // if p4 > PointOnThreshold  mask |= BottomRightBit;

    return mask;
}

void remesh(VoxelGrid* grid) {
    grid.must_remesh = false;

    list_clear(grid.inds);
    list_clear(grid.inds_outline);

    uint32 size = grid.res - 1;
    uint32 g1_byteoffset = grid.res * grid.res;
    uint32 g2_byteoffset = g1_byteoffset + grid.res * size;

    for uint32 x : 0 .. size {
        for uint32 y : 0 .. size {

            /*
               i1--------e1--------i2
                |                  |
                |                  |
                |                  |
                e2                 e3
                |                  |
                |                  |
                |                  |
               i3--------e4--------i4
            */

            uint32 e2 = g1_byteoffset + x * size + y;
            uint32 e3 = g1_byteoffset + (x + 1) * size + y;
            uint32 e1 = g2_byteoffset + x * grid.res + (y + 1);
            uint32 e4 = g2_byteoffset + x * grid.res + y;

            uint32 i1 = get_index(grid.res, x, y + 1);
            uint32 i2 = get_index(grid.res, x + 1, y + 1);
            uint32 i3 = get_index(grid.res, x, y);
            uint32 i4 = get_index(grid.res, x + 1, y);

            let p1 = grid.data[i1];
            let p2 = grid.data[i2];
            let p3 = grid.data[i3];
            let p4 = grid.data[i4];

            uint8 mask = get_mask(p1, p2, p3, p4);

            switch (mask) {

                // corners
                case TopLeftBit: add_tri(grid, i1, e2, e1); break;
                case TopRightBit: add_tri(grid, i2, e1, e3); break;
                case BottomRightBit: add_tri(grid, i4, e3, e4); break;
                case BottomLeftBit: add_tri(grid, i3, e4, e2); break;

                // inverted corners
                case 0x0F & ~TopLeftBit:
                    add_tri(grid, i4, e1, e2);
                    add_tri(grid, i4, i2, e1);
                    add_tri(grid, i4, e2, i3);
                    break;
                case 0x0F & ~TopRightBit:
                    add_tri(grid, i3, e3, e1);
                    add_tri(grid, i3, i4, e3);
                    add_tri(grid, i3, e1, i1);
                    break;
                case 0x0F & ~BottomRightBit:
                    add_tri(grid, i1, e4, e3);
                    add_tri(grid, i1, e3, i2);
                    add_tri(grid, i1, i3, e4);
                    break;
                case 0x0F & ~BottomLeftBit:
                    add_tri(grid, i2, e2, e4);
                    add_tri(grid, i2, i1, e2);
                    add_tri(grid, i2, e4, i4);
                    break;

                // horizontal 'walls'
                case TopLeftBit | TopRightBit:
                    add_tri(grid, i1, e2, i2);
                    add_tri(grid, i2, e2, e3);
                    break;
                case BottomLeftBit | BottomRightBit:
                    add_tri(grid, i3, e3, e2);
                    add_tri(grid, i4, e3, i3);
                    break;
                // vertical 'walls'
                case TopLeftBit | BottomLeftBit:
                    add_tri(grid, i1, i3, e1);
                    add_tri(grid, i3, e4, e1);
                    break;
                case TopRightBit | BottomRightBit:
                    add_tri(grid, i2, e1, i4);
                    add_tri(grid, i4, e1, e4);
                    break;

                // diagonals
                case TopLeftBit | BottomRightBit:
                    add_tri(grid, i1, e2, e1);
                    add_tri(grid, i4, e3, e4);
                    break;
                case TopRightBit | BottomLeftBit:
                    add_tri(grid, i2, e1, e3);
                    add_tri(grid, i3, e4, e2);
                    break;

                // solid block
                case 0x0F:
                    add_tri(grid, i1, i3, i2);
                    add_tri(grid, i2, i3, i4);
                    break;
            }

            // outlines
            switch (mask) {

                // corners
                case TopLeftBit: add_outline(grid, e2, e1); break;
                case TopRightBit: add_outline(grid, e1, e3); break;
                case BottomRightBit: add_outline(grid, e3, e4); break;
                case BottomLeftBit: add_outline(grid, e4, e2); break;

                // inverted corners
                case 0x0F & ~TopLeftBit: add_outline(grid, e1, e2); break;
                case 0x0F & ~TopRightBit: add_outline(grid, e3, e1); break;
                case 0x0F & ~BottomRightBit: add_outline(grid, e3, e4); break;
                case 0x0F & ~BottomLeftBit: add_outline(grid, e2, e4); break;

                // horizontal 'walls'
                case TopLeftBit | TopRightBit:
                case BottomLeftBit | BottomRightBit: add_outline(grid, e3, e2); break;

                // vertical 'walls'
                case TopLeftBit | BottomLeftBit:
                case TopRightBit | BottomRightBit: add_outline(grid, e1, e4); break;

                // diagonals
                case TopLeftBit | BottomRightBit:
                    add_outline(grid, e2, e1);
                    add_outline(grid, e3, e4);
                    break;
                case TopRightBit | BottomLeftBit:
                    add_outline(grid, e1, e3);
                    add_outline(grid, e4, e2);
                    break;

                // solid block
                case 0x0F: break;
            }
        }
    }

    if true { // smoothing

        float32 half = grid.res as float32 / 2.0;

        for uint32 x : 0 .. grid.res {
            for uint32 y : 0 .. size {

                let p1 = grid.data[get_index(grid.res, x, y)];
                let p2 = grid.data[get_index(grid.res, x, y + 1)];

                bool b1 = p1 != 0.0;
                bool b2 = p2 != 0.0;

                float32 ofs;
                if b1 == b2 ofs = 0.5;
                else if b1  ofs = p1;
                else        ofs = 1.0 - p2;

                let i = g1_byteoffset + x * size + y;
                grid.verts[i].pos.x = x - half;
                grid.verts[i].pos.y = y + ofs - half;
            }
        }

        for uint32 x : 0 .. size {
            for uint32 y : 0 .. grid.res {

                let p1 = grid.data[get_index(grid.res, x, y)];
                let p2 = grid.data[get_index(grid.res, x + 1, y)];

                bool b1 = p1 != 0.0;
                bool b2 = p2 != 0.0;

                float32 ofs;
                if b1 == b2 ofs = 0.5;
                else if b1  ofs = p1;
                else        ofs = 1.0 - p2;

                let i = g2_byteoffset + x * grid.res + y;
                grid.verts[i].pos.x = x + ofs - half;
                grid.verts[i].pos.y = y - half;
            }
        }
    }


    for 0 .. grid.res * grid.res {
        let mat_id = grid.material[it];
        Color[] colors = { White, Blue, Gray };
        grid.verts[it].color = colors[mat_id];
    }


    uint32 ind_count = list_length(grid.inds);
    update_buffers(*grid.db, grid.verts, grid.numVerts, grid.inds as uint32*, ind_count);
    update_buffer(grid.inds_outline_ebo, list_length(grid.inds_outline) * sizeof uint32 as uint32, grid.inds_outline);
}

vec2 get_local_coords(VoxelGrid* grid, Transform2D tr, vec2 pos) return get_local_coords(grid, tr, pos.x, pos.y);
vec2 get_local_coords(VoxelGrid* grid, Transform2D tr, float32 x, y) {
    float32 half = grid.res as float32 / 2.0;
    return world2local(tr, x, y) + make_vec2(half);
}

vec2 get_world_coords(VoxelGrid* grid, Transform2D tr, vec2 pos) return get_world_coords(grid, tr, pos.x, pos.y);
vec2 get_world_coords(VoxelGrid* grid, Transform2D tr, float32 x, y) {
    float32 half = grid.res as float32 / 2.0;
    return local2world(tr, x - half, y - half);
}

void add_circle(with VoxelGrid* grid, with Transform2D transform, float32 radius, x, y) {
    grid.must_remesh = true;

    let p = get_local_coords(grid, transform, x, y);
    int32 rx = round(p.x) as int32;
    int32 ry = round(p.y) as int32;

    int32 iradius = (radius + 1) as int32;
    int32 x_min = clamp(rx - iradius, 0, grid.res as int32);
    int32 x_max = clamp(rx + iradius, 0, grid.res as int32);
    int32 y_min = clamp(ry - iradius, 0, grid.res as int32);
    int32 y_max = clamp(ry + iradius, 0, grid.res as int32);

    // TODO: no +1 on max, see remove_circle
    for ix : x_min .. x_max {
        for iy : y_min .. y_max {
            float32 xf = ix as float32 - p.x;
            float32 yf = iy as float32 - p.y;
            float32 len = sqrtf(xf*xf + yf*yf);

            int32 i = ix * grid.res + iy;
            float32 addition = clamp(radius - len, 0, 1);
            if grid.data[i] < addition grid.data[i] = addition;
        }
    }
}

void remove_circle(with VoxelGrid* grid, with Transform2D transform, float32 radius, x, y) {
    grid.must_remesh = true;

    let p = get_local_coords(grid, transform, x, y);
    int32 rx = round(p.x) as int32;
    int32 ry = round(p.y) as int32;

    int32 size = grid.res as int32 - 1;
    int32 iradius = (radius + 1) as int32;
    int32 x_min = clamp(rx - iradius, 0, size);
    int32 x_max = clamp(rx + iradius, 0, size);
    int32 y_min = clamp(ry - iradius, 0, size);
    int32 y_max = clamp(ry + iradius, 0, size);

    for ix : x_min .. x_max + 1 {
        for iy : y_min .. y_max + 1 {
            float32 xf = ix as float32 - p.x;
            float32 yf = iy as float32 - p.y;
            float32 len = sqrtf(xf*xf + yf*yf);

            int32 i = ix * grid.res + iy;
            float32 newValue = clamp(len - radius, 0, 1);
            if grid.data[i] > newValue grid.data[i] = newValue;
        }
    }
}

vec2 calcCenterOfMass(VoxelGrid* grid) {
    vec2 res = make_vec(0, 0);
    float32 total = 0;

    uint32 x = -1; while ++x < grid.res {
        uint32 y = -1; while ++y < grid.res {
            let i = x * grid.res + y;
            float32 value = grid.data[i];
            if value != 0.0 {
                total += value;
                res = add(res, mul(make_vec(x, y), value));
            }
        }
    }

    res = mul(res, 1.0 / total);
    return res;
}

struct Intersection2D {
    vec2 surface_normal;
    float32 distance;
    ivec2 cell;
}

struct Lineseg {
    vec2 start, end;
}

struct Ray {
    vec2 origin, dir;
}

int32 ray_lineseg_intersects(Ray ray, Lineseg seg, Intersection2D* out_intersection) {
    let A = sub(seg.start, ray.origin);
    let B = sub(seg.end, ray.origin);

    let tangent = rot90deg(ray.dir);

    let d1 = dot(A, tangent);
    let d2 = dot(B, tangent);

    // if d1 & 0x80000000 == d2 & 0x80000000 {
    //     return true;
    // }

    return false;
}

bool get_lineseg(VoxelGrid* grid, Transform2D tr, int32 ix, iy, Lineseg* seg) {
    @seg = {};

    int32 res = grid.res as int32;
    if ix < 0 or ix >= res-1 return false;
    if iy < 0 or iy >= res-1 return false;

    uint32 x = ix as uint32;
    uint32 y = iy as uint32;

    let i1 = get_index(grid.res, x, y + 1);
    let i2 = get_index(grid.res, x + 1, y + 1);
    let i3 = get_index(grid.res, x, y);
    let i4 = get_index(grid.res, x + 1, y);

    let p1 = grid.data[i1];
    let p2 = grid.data[i2];
    let p3 = grid.data[i3];
    let p4 = grid.data[i4];

    uint8 mask = get_mask(p1, p2, p3, p4);

    // let size = grid.res - 1;
    // let g1_byteoffset = grid.res * grid.res;
    // let g2_byteoffset = g1_byteoffset + grid.res * size;
    // let e2 = g1_byteoffset + x * size + y;
    // let e3 = g1_byteoffset + (x + 1) * size + y;
    // let e1 = g2_byteoffset + x * grid.res + (y + 1);
    // let e4 = g2_byteoffset + x * grid.res + y;

    vec2 a = {};
    vec2 b = {};
    switch (mask) {
        // corners
        case TopLeftBit:
            a = make_vec(p1, 1);
            b = make_vec(0, 1 - p1);
            break;
        case TopRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(1 - p2, 1);
            break;
        case BottomRightBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(1, p4);
            break;
        case BottomLeftBit:
            a = make_vec(0, p3);
            b = make_vec(p3, 0);
            break;

        // inverted corners
        case 0x0F & ~TopLeftBit:
            a = make_vec(0, p3);
            b = make_vec(1 - p2, 1);
            break;
        case 0x0F & ~TopRightBit:
            a = make_vec(p1, 1);
            b = make_vec(1, p4);
            break;
        case 0x0F & ~BottomRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(p3, 0);
            break;
        case 0x0F & ~BottomLeftBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(0, 1 - p1);
            break;

        // horizontal 'walls'
        case TopLeftBit | TopRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(0, 1 - p1);
            break;
        case BottomLeftBit | BottomRightBit:
            a = make_vec(0, p3);
            b = make_vec(1, p4);
            break;
        // vertical 'walls'
        case TopLeftBit | BottomLeftBit:
            a = make_vec(p1, 1);
            b = make_vec(p3, 0);
            break;
        case TopRightBit | BottomRightBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(1 - p2, 1);
            break;

        // // diagonals
        // case TopLeftBit | BottomRightBit: break;
        // case TopRightBit | BottomLeftBit: break;

        // solid block
        case 0x0F: return false;
        // air
        case 0x0: return false;

        default: return false;
    }

    seg.start = a;
    seg.end = b;

    return true;
}

bool point_intersects(VoxelGrid* grid, Transform2D tr, vec2 point, Intersection2D* out_intersection) {

    @out_intersection = {};

    point = get_local_coords(grid, tr, point.x, point.y);
    int32 x = point.x as int32;
    int32 y = point.y as int32;

    Lineseg seg = {};
    if get_lineseg(grid, tr, x, y, *seg) {
        vec2 local = point - make_vec(x, y) - seg.start;
        vec2 normal = normalize(rot90deg(seg.end - seg.start));

        out_intersection.distance = dot(normal, local);
        out_intersection.surface_normal = rotate_vec(normal, tr.rot);

        if out_intersection.distance <= 0 return true;
    }

    return false;
}

vec2 closest_point_on_linesegment(vec2 a, b, p) {
    let ab = b - a;
    let t = clamp(dot(ab, p - a) / dot(ab, ab), 0, 1);
    return lerp(t, a, b);
}

bool circle_intersects(VoxelGrid* grid, Transform2D tr, vec2 center, float32 radius, Intersection2D* inter) {

    @inter = {};

    center = get_local_coords(grid, tr, center.x, center.y);
    int32 ix = center.x as int32;
    int32 iy = center.y as int32;

    int32 ir = (radius + 1) as int32;
    int32 y_min = iy - ir;
    int32 y_max = iy + ir;
    int32 x_min = ix - ir;
    int32 x_max = ix + ir;

    for y : y_min .. y_max+1
    for x : x_min .. x_max+1 {
        Lineseg seg = {};
        if get_lineseg(grid, tr, x, y, *seg) {
            let v = make_vec(x, y);
            let p = closest_point_on_linesegment(v + seg.start,
                                                 v + seg.end,
                                                 center);
            let d = circle_dist(center, radius, p, 0);

            draw_circle(get_world_coords(grid, tr, center),        0.1, make_vec(1,1,0, 0.2));
            draw_circle(get_world_coords(grid, tr, v + seg.start), 0.1, make_vec(0,1,0, 0.2));
            draw_circle(get_world_coords(grid, tr, v + seg.end  ), 0.1, make_vec(0,1,0, 0.2));
            draw_circle(get_world_coords(grid, tr, p),             0.1, make_vec(0,1,1, 0.2));

            if d <= 0 {
                inter.distance = d;
                inter.surface_normal = rotate_vec(normalize(rot90deg(seg.end - seg.start)), tr.rot);

                inter.cell = make_ivec(x, y);
                return true;
            }
        }
    }

    return false;
}
