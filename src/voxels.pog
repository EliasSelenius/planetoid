
struct VoxelGrid {
    Transform2D transform;

    float32* data;
    uint32 res;

    DrawBuffers db;
    uint32 inds_outline_ebo;

    uint32 numVerts;
    vertex2D* verts;
    uint32* inds; // list
    uint32* inds_outline; // list
}

const TopLeftBit = 8;
const TopRightBit = 4;
const BottomLeftBit = 2;
const BottomRightBit = 1;

const PointOnThreshold = 0.001;

void add_tri(with VoxelGrid* grid, uint32 i1, uint32 i2, uint32 i3) {
    list_add(*grid.inds, *i1);
    list_add(*grid.inds, *i2);
    list_add(*grid.inds, *i3);
}

void add_outline(with VoxelGrid* grid, uint32 i1, uint32 i2) {
    list_add(*grid.inds_outline, *i1);
    list_add(*grid.inds_outline, *i2);
}

uint32 getIndex(uint32 res, uint32 x, uint32 y) {
    return x * res + y;
}

VoxelGrid createVoxelGrid(uint32 res) {
    VoxelGrid grid;
    grid.transform.pos = make_vec(0, 0);
    grid.transform.rot = 0;
    // grid.transform.scale = 1;

    grid.res = res;
    grid.data = malloc(res * res * sizeof float32);

    //              3r^2 - 2r
    grid.numVerts = 3 * grid.res * grid.res - 2 * grid.res;
    grid.verts = malloc(grid.numVerts * sizeof vertex2D);

    float32 half = grid.res as float32 / 2.0;

    for uint32 x : 0 .. grid.res {
        for uint32 y : 0 .. grid.res {
            let i = getIndex(grid.res, x, y);
            grid.verts[i].pos.x = x as float32 - half;
            grid.verts[i].pos.y = y as float32 - half;
        }
    }

    grid.inds = list_create(sizeof uint32 as uint32);
    grid.inds_outline = list_create(sizeof uint32 as uint32);

    grid.db = create_draw_buffers();

    glGenBuffers(1, *grid.inds_outline_ebo);

    return grid;
}

void updateGridMesh(VoxelGrid* grid) {

    list_clear(grid.inds);
    list_clear(grid.inds_outline);

    uint32 size = grid.res - 1;
    let g1_byteoffset = grid.res * grid.res;
    let g2_byteoffset = g1_byteoffset + grid.res * size;

    for uint32 x : 0 .. size {
        for uint32 y : 0 .. size {

            /*
                *--------1--------*
                |                 |
                |                 |
                |                 |
                2                 3
                |                 |
                |                 |
                |                 |
                *--------4--------*
            */

            let e2 = g1_byteoffset + x * size + y;
            let e3 = g1_byteoffset + (x + 1) * size + y;
            let e1 = g2_byteoffset + x * grid.res + (y + 1);
            let e4 = g2_byteoffset + x * grid.res + y;

            let i1 = getIndex(grid.res, x, y + 1);
            let i2 = getIndex(grid.res, x + 1, y + 1);
            let i3 = getIndex(grid.res, x, y);
            let i4 = getIndex(grid.res, x + 1, y);

            let p1 = grid.data[i1];
            let p2 = grid.data[i2];
            let p3 = grid.data[i3];
            let p4 = grid.data[i4];

            uint8 mask = 0;
            if p1 > PointOnThreshold mask |= TopLeftBit;
            if p2 > PointOnThreshold mask |= TopRightBit;
            if p3 > PointOnThreshold mask |= BottomLeftBit;
            if p4 > PointOnThreshold mask |= BottomRightBit;

            switch (mask) {

                // corners
                case TopLeftBit: add_tri(grid, i1, e2, e1); break;
                case TopRightBit: add_tri(grid, i2, e1, e3); break;
                case BottomRightBit: add_tri(grid, i4, e3, e4); break;
                case BottomLeftBit: add_tri(grid, i3, e4, e2); break;

                // inverted corners
                case 0x0F & ~TopLeftBit:
                    add_tri(grid, i4, e1, e2);
                    add_tri(grid, i4, i2, e1);
                    add_tri(grid, i4, e2, i3);
                    break;
                case 0x0F & ~TopRightBit:
                    add_tri(grid, i3, e3, e1);
                    add_tri(grid, i3, i4, e3);
                    add_tri(grid, i3, e1, i1);
                    break;
                case 0x0F & ~BottomRightBit:
                    add_tri(grid, i1, e3, e4);
                    add_tri(grid, i1, e3, i2);
                    add_tri(grid, i1, e4, i3);
                    break;
                case 0x0F & ~BottomLeftBit:
                    add_tri(grid, i2, e2, e4);
                    add_tri(grid, i2, i1, e2);
                    add_tri(grid, i2, e4, i4);
                    break;

                // horizontal 'walls'
                case TopLeftBit | TopRightBit:
                    add_tri(grid, i1, e2, i2);
                    add_tri(grid, i2, e2, e3);
                    break;
                case BottomLeftBit | BottomRightBit:
                    add_tri(grid, i3, e3, e2);
                    add_tri(grid, i4, e3, i3);
                    break;
                // vertical 'walls'
                case TopLeftBit | BottomLeftBit:
                    add_tri(grid, i1, i3, e1);
                    add_tri(grid, i3, e4, e1);
                    break;
                case TopRightBit | BottomRightBit:
                    add_tri(grid, i2, e1, i4);
                    add_tri(grid, i4, e1, e4);
                    break;

                // diagonals
                case TopLeftBit | BottomRightBit:
                    add_tri(grid, i1, e2, e1);
                    add_tri(grid, i4, e3, e4);
                    break;
                case TopRightBit | BottomLeftBit:
                    add_tri(grid, i2, e1, e3);
                    add_tri(grid, i3, e4, e2);
                    break;

                // solid block
                case 0x0F:
                    add_tri(grid, i1, i3, i2);
                    add_tri(grid, i2, i3, i4);
                    break;
            }

            // outlines
            switch (mask) {

                // corners
                case TopLeftBit: add_outline(grid, e2, e1); break;
                case TopRightBit: add_outline(grid, e1, e3); break;
                case BottomRightBit: add_outline(grid, e3, e4); break;
                case BottomLeftBit: add_outline(grid, e4, e2); break;

                // inverted corners
                case 0x0F & ~TopLeftBit: add_outline(grid, e1, e2); break;
                case 0x0F & ~TopRightBit: add_outline(grid, e3, e1); break;
                case 0x0F & ~BottomRightBit: add_outline(grid, e3, e4); break;
                case 0x0F & ~BottomLeftBit: add_outline(grid, e2, e4); break;

                // horizontal 'walls'
                case TopLeftBit | TopRightBit:
                case BottomLeftBit | BottomRightBit: add_outline(grid, e3, e2); break;

                // vertical 'walls'
                case TopLeftBit | BottomLeftBit:
                case TopRightBit | BottomRightBit: add_outline(grid, e1, e4); break;

                // diagonals
                case TopLeftBit | BottomRightBit:
                    add_outline(grid, e2, e1);
                    add_outline(grid, e3, e4);
                    break;
                case TopRightBit | BottomLeftBit:
                    add_outline(grid, e1, e3);
                    add_outline(grid, e4, e2);
                    break;

                // solid block
                case 0x0F: break;
            }
        }
    }

    if true { // smoothing

        float32 half = grid.res as float32 / 2.0;

        for uint32 x : 0 .. grid.res {
            for uint32 y : 0 .. size {

                let p1 = grid.data[getIndex(grid.res, x, y)];
                let p2 = grid.data[getIndex(grid.res, x, y + 1)];

                let b1 = p1 > PointOnThreshold;
                let b2 = p2 > PointOnThreshold;

                float32 ofs;
                if b1 == b2 ofs = 0.5;
                else if b1  ofs = p1;
                else        ofs = 1.0 - p2;

                let i = g1_byteoffset + x * size + y;
                grid.verts[i].pos.x = x - half;
                grid.verts[i].pos.y = y + ofs - half;
            }
        }

        for uint32 x : 0 .. size {
            for uint32 y : 0 .. grid.res {

                let p1 = grid.data[getIndex(grid.res, x, y)];
                let p2 = grid.data[getIndex(grid.res, x + 1, y)];

                let b1 = p1 > PointOnThreshold;
                let b2 = p2 > PointOnThreshold;

                float32 ofs;
                if b1 == b2 ofs = 0.5;
                else if b1  ofs = p1;
                else        ofs = 1.0 - p2;

                let i = g2_byteoffset + x * grid.res + y;
                grid.verts[i].pos.x = x + ofs - half;
                grid.verts[i].pos.y = y - half;
            }
        }
    }

    update_buffers(*grid.db, grid.verts, grid.numVerts, grid.inds, list_length(grid.inds));
    update_buffer(grid.inds_outline_ebo, list_length(grid.inds_outline) * sizeof uint32 as uint32, grid.inds_outline);
}

vec2 getLocalCoords(VoxelGrid* grid, float32 x, float32 y) {
    let p = world2local(grid.transform, x, y);
    float32 half = grid.res as float32 / 2.0;
    p.x += half;
    p.y += half;
    return p;
}

void VoxelGrid_addCircle(VoxelGrid* grid, float32 radius, float32 x, float32 y) {

    let p = getLocalCoords(grid, x, y);
    int32 rx = round2int(p.x);
    int32 ry = round2int(p.y);

    int32 iradius = (radius + 1) as int32;
    int32 x_min = clamp(rx - iradius, 0, grid.res as int32);
    int32 x_max = clamp(rx + iradius, 0, grid.res as int32);
    int32 y_min = clamp(ry - iradius, 0, grid.res as int32);
    int32 y_max = clamp(ry + iradius, 0, grid.res as int32);

    for ix : x_min .. x_max {
        for iy : y_min .. y_max {
            float32 xf = ix as float32 - p.x;
            float32 yf = iy as float32 - p.y;
            float32 len = sqrtf(xf*xf + yf*yf);

            int32 i = ix * grid.res + iy;
            float32 addition = clamp(radius - len, 0, 1);
            if grid.data[i] < addition grid.data[i] = addition;
        }
    }
}

void VoxelGrid_removeCircle(VoxelGrid* grid, float32 radius, float32 x, float32 y) {

    let p = getLocalCoords(grid, x, y);
    int32 rx = round2int(p.x);
    int32 ry = round2int(p.y);

    int32 iradius = (radius + 1) as int32;
    int32 x_min = clamp(rx - iradius, 0, grid.res as int32);
    int32 x_max = clamp(rx + iradius, 0, grid.res as int32);
    int32 y_min = clamp(ry - iradius, 0, grid.res as int32);
    int32 y_max = clamp(ry + iradius, 0, grid.res as int32);

    for ix : x_min .. x_max + 1 {
        for iy : y_min .. y_max + 1 {
            float32 xf = ix as float32 - p.x;
            float32 yf = iy as float32 - p.y;
            float32 len = sqrtf(xf*xf + yf*yf);

            int32 i = ix * grid.res + iy;
            float32 newValue = clamp(len - radius, 0, 1);
            if grid.data[i] > newValue grid.data[i] = newValue;
        }
    }
}

vec2 calcCenterOfMass(VoxelGrid* grid) {
    vec2 res = make_vec(0, 0);
    float32 total = 0;

    uint32 x = -1; while ++x < grid.res {
        uint32 y = -1; while ++y < grid.res {
            let i = x * grid.res + y;
            float32 value = grid.data[i];
            if value > PointOnThreshold {
                total += value;
                res = add(res, mul(make_vec(x, y), value));
            }
        }
    }

    res = mul(res, 1.0 / total);
    return res;
}

struct Intersection {
    vec2 surface_normal;
    float32 distance;
}

vec2 rot90deg(vec2 v) {
    vec2 res = make_vec(-v.y, v.x); // rotate 90 degrees to the left. (multiplication with imaginary unit)
    return res;
}

struct Lineseg {
    vec2 start, end;
}

struct Ray {
    vec2 origin, dir;
}

int32 ray_lineseg_intersects(Ray ray, Lineseg seg, Intersection* out_intersection) {
    let A = sub(seg.start, ray.origin);
    let B = sub(seg.end, ray.origin);

    let tangent = rot90deg(ray.dir);

    let d1 = dot(A, tangent);
    let d2 = dot(B, tangent);

    // if d1 & 0x80000000 == d2 & 0x80000000 {
    //     return true;
    // }

    return false;
}

int32 point_intersects(vec2 point, VoxelGrid* grid, Intersection* out_intersection) {

    @out_intersection = {0} as Intersection;

    point = getLocalCoords(grid, point.x, point.y);
    int32 x = point.x as int32;
    int32 y = point.y as int32;

    if x < 0 or x >= grid.res return false;
    if y < 0 or y >= grid.res return false;

    let i1 = grid.res * x + y + 1;
    let i2 = grid.res * (x + 1) + y + 1;
    let i3 = grid.res * x + y;
    let i4 = grid.res * (x + 1) + y;

    let p1 = grid.data[i1];
    let p2 = grid.data[i2];
    let p3 = grid.data[i3];
    let p4 = grid.data[i4];

    uint8 mask = 0;
    if p1 > PointOnThreshold mask |= TopLeftBit;
    if p2 > PointOnThreshold mask |= TopRightBit;
    if p3 > PointOnThreshold mask |= BottomLeftBit;
    if p4 > PointOnThreshold mask |= BottomRightBit;

    // let size = grid.res - 1;
    // let g1_byteoffset = grid.res * grid.res;
    // let g2_byteoffset = g1_byteoffset + grid.res * size;
    // let e2 = g1_byteoffset + x * size + y;
    // let e3 = g1_byteoffset + (x + 1) * size + y;
    // let e1 = g2_byteoffset + x * grid.res + (y + 1);
    // let e4 = g2_byteoffset + x * grid.res + y;


    vec2 a;
    vec2 b;
    switch (mask) {
        // corners
        case TopLeftBit:
            a = make_vec(p1, 1);
            b = make_vec(0, 1 - p1);
            break;
        case TopRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(1 - p2, 1);
            break;
        case BottomRightBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(1, p4);
            break;
        case BottomLeftBit:
            a = make_vec(0, p3);
            b = make_vec(p3, 0);
            break;

        // inverted corners
        case 0x0F & ~TopLeftBit:
            a = make_vec(0, p3);
            b = make_vec(1 - p2, 1);
            break;
        case 0x0F & ~TopRightBit:
            a = make_vec(p1, 1);
            b = make_vec(1, p4);
            break;
        case 0x0F & ~BottomRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(p3, 0);
            break;
        case 0x0F & ~BottomLeftBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(0, 1 - p1);
            break;

        // horizontal 'walls'
        case TopLeftBit | TopRightBit:
            a = make_vec(1, 1 - p2);
            b = make_vec(0, 1 - p1);
            break;
        case BottomLeftBit | BottomRightBit:
            a = make_vec(0, p3);
            b = make_vec(1, p4);
            break;
        // vertical 'walls'
        case TopLeftBit | BottomLeftBit:
            a = make_vec(p1, 1);
            b = make_vec(p3, 0);
            break;
        case TopRightBit | BottomRightBit:
            a = make_vec(1 - p4, 0);
            b = make_vec(1 - p2, 1);
            break;

        // // diagonals
        // case TopLeftBit | BottomRightBit: break;
        // case TopRightBit | BottomLeftBit: break;

        // solid block
        case 0x0F: return true;
        // air
        case 0x0: return false;

        default: return false;
    }


    vec2 local = sub(point, make_vec(x, y));
    local = sub(local, a);

    vec2 normal = rot90deg(sub(b, a));
    normal = normalize(normal);

    out_intersection.distance = dot(normal, local);
    out_intersection.surface_normal = rotate_vec(normal, grid.transform.rot);

    if out_intersection.distance <= 0 return true;

    return false;
}
