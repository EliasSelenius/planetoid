
/*

    ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll
    ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll -O0 -g -fsanitize=address -fno-omit-frame-pointer

    TODO:
        - 2d noise function
        - basic planet generation, using noise
        - player controller (gravity, collision, jump, jetpack)
        - player sprite

    InProgress:
        - point to voxelgrid intersection func

    DONE:

*/


include "../grax/grax.pog";
include "src/voxels.pog";
include "src/world.pog";

Transform2D camera;

float32 voxel_edit_radius = 1;
DrawBuffers voxelMesh_circle;

Texture2D player_texture;
Texture2D random_texture;

void apply_camera() {
    set_uniform("zoom", camera.scale);
    set_uniform("cam_pos", camera.pos);
    set_uniform("cam_rot", camera.rot);
}


void apply_transform(Transform2D t) {
    set_uniform("entity_pos", t.pos.x, t.pos.y, 0);
    set_uniform("entity_rot", t.rot);
    set_uniform("entity_scale", t.scale, t.scale);
}

void uniform_entity_pos(vec2 pos) set_uniform("entity_pos", pos.x, pos.y, 0);
void uniform_entity_rot(float32 rot) set_uniform("entity_rot", rot);
void uniform_entity_scale(float32 scale) set_uniform("entity_scale", scale, scale);


void on_event(AppEvent event, AppEventData data) switch event {
}

void load() {

    player_texture = load_texture2D("textures/player.bmp");

    { // genereate image
        const size = 64;
        Image image;
        image.width = size;
        image.height = size;
        image.pixels = malloc(sizeof(Color) * size * size);

        // for i : 0 .. size * size {
        //     let v = (random(i) + 1.0) / 2.0 ;
        //     if v < 0 print("v: ", v, "\n");
        //     uint8 c = (v * 255) as uint8;
        //     image.pixels[i] = {c, c, c, 255};
        // }

        for x : 0 .. size {
            for y : 0 .. size {
                float32 d = 10.0;
                let g = gnoise(x / d, y / d);
                let v = (g + 1.0) / 2.0 ;

                uint8 c = (v * 255) as uint8;
                image.pixels[x * size + y] = {c, c, c, 255};
            }
        }

        random_texture = create_texture2D(image);
        set_filter(random_texture, TextureFilter.nearest);
        free(image.pixels);
    }

    world_init();

    voxelMesh_circle = genCircle(360, 1);
}

void main() {

    app.on_event = on_event;
    grax_init();


    load();

    glClearColor(0.05, 0.05, 0.05, 1.0);
    glLineWidth(10);

    while grax_loop() {

        let s = mouse_scroll as float32;
        if key(GLFW_KEY_LEFT_CONTROL) {
            voxel_edit_radius += s * 0.1;
            voxel_edit_radius = clamp(voxel_edit_radius, 0.1, 100);
        } else {
            camera.scale -= camera.scale * s * 0.1;
            camera.scale = clamp(camera.scale, 1.0, 10000.0);
        }


        // use(*shader);
        use(*default2d_shader);
        // bind(player_texture);
        bind(random_texture);
        // bind(white_texture)

        world_update();
    }
}
