
/*

    ../plang/bin/plang.exe build cflags -lglfw3dll

    TODO:
        - 2d noise function
        - basic planet generation, using noise
        - player controller (gravity, collision, jump, jetpack)
        - player sprite

    InProgress:
        - point to voxelgrid intersection func

    DONE:

*/


include "../grax/grax.pog";

Shader shader;
Transform2D camera;

float32 voxel_edit_radius = 1;
DrawBuffers voxelMesh_circle;

Texture2D player_texture;
Texture2D random_texture;

void apply_camera() {
    glUniform1f(glGetUniformLocation(shader.gl_handle, "zoom"), camera.scale);
    glUniform2f(glGetUniformLocation(shader.gl_handle, "cam_pos"), camera.pos.x, camera.pos.y);
    glUniform1f(glGetUniformLocation(shader.gl_handle, "cam_rot"), camera.rot);
}


void apply_transform(Transform2D t) {
    glUniform2f(glGetUniformLocation(shader.gl_handle, "entity_pos"), t.pos.x, t.pos.y);
    glUniform1f(glGetUniformLocation(shader.gl_handle, "entity_rot"), t.rot);
    glUniform1f(glGetUniformLocation(shader.gl_handle, "entity_scale"), t.scale);
}

void uniform_entity_pos(vec2 pos) { glUniform2f(glGetUniformLocation(shader.gl_handle, "entity_pos"), pos.x, pos.y); }
void uniform_entity_rot(float32 rot) { glUniform1f(glGetUniformLocation(shader.gl_handle, "entity_rot"), rot); }
void uniform_entity_scale(float32 scale) { glUniform1f(glGetUniformLocation(shader.gl_handle, "entity_scale"), scale); }


void on_mouse_scroll(GLFWwindow* w, float64 x, float64 y) {
    let s = y as float32;
    if key(GLFW_KEY_LEFT_CONTROL) {
        voxel_edit_radius += s * 0.1;
        voxel_edit_radius = clamp(voxel_edit_radius, 0.1, 100);
    } else {
        camera.scale -= camera.scale * s * 0.1;
        camera.scale = clamp(camera.scale, 1.0, 10000.0);
    }
}

void on_key_input(GLFWwindow* window, int32 key, int32 scancode, int32 action, int32 mods) {
    if action == GLFW_PRESS {
        switch key {
            case GLFW_KEY_F11: toggle_fullscreen(main_window); break;
        }
    }
}

Texture2D load_texture(char* file_name) {
    let image = load_bitmap(file_name);
    let tex = create_texture2D(image);
    set_filter(tex, GL_NEAREST);
    free(image.pixels);
    return tex;
}

void load() {

    glfwSetScrollCallback(main_window, on_mouse_scroll);
    glfwSetKeyCallback(main_window, on_key_input);


    { // load shader
        let f = fileread("shaders/frag.glsl");
        let v = fileread("shaders/vert.glsl");

        shader = create_shader(f, v);

        free(f);
        free(v);
    }

    player_texture = load_texture("textures/player.bmp");

    { // genereate image
        const size = 64;
        Image image;
        image.width = size;
        image.height = size;
        image.pixels = malloc(sizeof(Color) * size * size);

        // for i : 0 .. size * size {
        //     let v = (random(i) + 1.0) / 2.0 ;
        //     if v < 0 print("v: ", v, "\n");
        //     uint8 c = (v * 255) as uint8;
        //     image.pixels[i] = {c, c, c, 255};
        // }

        for x : 0 .. size {
            for y : 0 .. size {
                float32 d = 10.0;
                let g = gnoise(x / d, y / d);
                let v = (g + 1.0) / 2.0 ;

                uint8 c = (v * 255) as uint8;
                image.pixels[x * size + y] = {c, c, c, 255};
            }
        }

        random_texture = create_texture2D(image);
        set_filter(random_texture, GL_NEAREST);
        free(image.pixels);
    }

    world_init();

    voxelMesh_circle = genCircle(360, 1);
}

int32 main() {

    grax_init();


    load();

    {
        char* version = glGetString(GL_VERSION) as char*;
        print("OpenGL version: ", version, "\n");
    }

    glClearColor(0.05, 0.05, 0.05, 1.0);
    glLineWidth(10);

    while grax_loop() {

        use(*shader);
        // bind(player_texture);
        bind(random_texture);

        world_update();
    }
}
