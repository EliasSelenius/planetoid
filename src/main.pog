
/*

    ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll
    ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll -O0 -g -fsanitize=address -fno-omit-frame-pointer

    TODO:
        - player move and jump
            - friction

        - basic dirt texture on terrain
        - bazooka
        - grenade
        - atmosphere
        - clouds

    InProgress:


*/

include "../plang/common/builtin/types.pog";

include "../grax/grax.pog";
include "src/voxels.pog";
include "src/world.pog";

Transform2D camera;

RenderLayer static_ui;

float32 voxel_edit_radius = 0.5;

DrawBuffers db_circle;
DrawBuffers db_quad;

Texture2D player_texture;
Texture2D random_texture;
Texture2D texture_cloud;

void load_assets() {

    player_texture = load_texture2D("textures/player.bmp");
    texture_cloud = white_texture; // load_texture2D("../shared_assets/cloud.bmp");

    { // genereate image
        const size = 64;
        Image image;
        image.width = size;
        image.height = size;
        image.pixels = malloc(sizeof(Color) * size * size);

        // for i : 0 .. size * size {
        //     let v = (random(i) + 1.0) / 2.0 ;
        //     if v < 0 print("v: ", v, "\n");
        //     uint8 c = (v * 255) as uint8;
        //     image.pixels[i] = {c, c, c, 255};
        // }

        for x : 0 .. size {
            for y : 0 .. size {
                float32 d = 10.0;
                let g = gnoise(x / d, y / d);
                let v = (g + 1.0) / 2.0 ;

                uint8 c = (v * 255) as uint8;
                image.pixels[x * size + y] = {v*82 , v*53 , v*25 , 255};
            }
        }

        random_texture = create_texture2D(image);
        set_filter(random_texture, TextureFilter.nearest);
        free(image.pixels);
    }

    db_circle = genCircle(360, 1);
    db_quad   = draw2d_renderer.quad_db;
}

void draw_circle(vec2 pos, float32 radius, vec4 color) {
    Transform2D tr = { pos = pos, scale = radius };
    draw_texture(
        db_circle,
        tr,
        0,
        white_texture,
        false,
        vec2_zero, vec2_one,
        color, vec4_zero, vec4_zero);
}

void draw_quad(Transform2D tr, float32 depth, vec4 color) {
    draw_texture(
        db_quad,
        tr,
        depth,
        white_texture,
        false,
        vec2_zero, vec2_one,
        color, vec4_zero, vec4_zero);
}

void on_event(AppEvent event, AppEventData data) switch event {
}

void main() {

    app.on_event = on_event;
    grax_init();
    init_draw2d();

    static_ui = create_layer();
    immediate_layer = *static_ui;

    load_assets();
    world_init();


    glClearColor(0.05, 0.05, 0.05, 1.0);
    glLineWidth(10);

    while grax_loop() {

        let s = mouse_scroll as float32;
        if key(GLFW_KEY_LEFT_CONTROL) {
            voxel_edit_radius += s * 0.1;
            voxel_edit_radius = clamp(voxel_edit_radius, 0.1, 100);
        } else {
            camera.scale -= camera.scale * s * 0.1;
            camera.scale = clamp(camera.scale, 1.0, 10000.0);
        }

        world_update();

        Transform2D tr = {};
        tr.scale = (100);
        draw_texture(
            draw2d_renderer.quad_db,
            tr,
            0,
            white_texture,
            false,
            vec2_zero, vec2_one,
            vec4_one, vec4_zero, vec4_zero);

        dispatch_sprites(camera);

        let planet = player.planet;
        if planet {
            InstanceData data = {
                pos = make_vec(planet.tr.pos, 0),
                0,
                vec2_one,
                vec2_zero, vec2_one,
                vec4_one, vec4_zero
            };

            set_instance_data(data);
            glBindVertexArray(planet.grid.db.vao);

            // draw grid
            glDrawArrays(GL_POINTS, 0, planet.grid.numVerts as int32);

            // draw outline
            // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, planet.grid.inds_outline_ebo);
            // glDrawElements(GL_LINES, list_length(planet.grid.inds_outline), GL_UNSIGNED_INT, null);
            // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, planet.grid.db.ebo);

            glBindVertexArray(0);
        }

        dispatch_layer(*static_ui, {scale=1} as Transform2D);
    }
    
}

void modify_terrain(Planet* planet) {
    let mouse_coord = getMouseWorldCoord();

    if mouse(Left_Mouse) {
        add_circle(*planet.grid, planet.tr, voxel_edit_radius, mouse_coord.x, mouse_coord.y);
    } else if mouse(Right_Mouse) {
        remove_circle(*planet.grid, planet.tr, voxel_edit_radius, mouse_coord.x, mouse_coord.y);
    }

    vec4 color = make_vec(1,1,1, 0.3);
    Intersection2D inter = {};
    if circle_intersects(*planet.grid, planet.tr, mouse_coord, voxel_edit_radius, *inter) {
        // print("Intersects ", inter.distance, "\n");
        color.y = 0;
        color.z = 0;
    }

    draw_circle(mouse_coord, voxel_edit_radius, color);

    {
        let p = get_local_coords(*planet.grid, planet.tr, mouse_coord.x, mouse_coord.y);
        int32 ix = (p.x) as int32;
        int32 iy = (p.y) as int32;

        int32 ir = (voxel_edit_radius + 1) as int32;
        int32 y_min = iy - ir;
        int32 y_max = iy + ir;
        int32 x_min = ix - ir;
        int32 x_max = ix + ir;

        for y : y_min .. y_max+1
        for x : x_min .. x_max+1 {
            Transform2D tr = {};
            tr.scale = 1;
            tr.rot = planet.tr.rot;
            tr.pos = get_world_coords(*planet.grid, planet.tr, x + 0.5, y + 0.5);

            vec4 color = opacity(vec4_one, 0.1);
            if x == inter.cell.x and y == inter.cell.y {
                color.x = 0;
                color.y = 0;
            }

            draw_texture(
                draw2d_renderer.quad_db,
                tr,
                -0.01,
                white_texture,
                false,
                vec2_zero, vec2_one,
                color, vec4_zero, vec4_zero);
        }
    }
}

